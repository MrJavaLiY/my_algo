#include <stdio.h>
#include <stdlib.h>

int main() {
    char str[] = "{[()]}}"; // 测试字符串
    int top = -1; // 栈顶指针初始化为-1
    char stack[100]; // 假设最多处理100对括号
    //利用了一个数组，将左括号放到数组里面，然后标记位也就是栈顶指针，不停的往后移动，标识压栈，然后遇到右括号，那就把右括号拿出来和上一个压入栈的左括号做配套匹配
    //括号有个特殊情况就是总是左右配套，如果[((}]))这种也是不行的，因为他们组合不成一组，第一个中括号已经限制了中间三个括号的范围，他无法再跟后面的组成一组良好的括号
    //所以这种情况可以直接弹出
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == '(' || str[i] == '{' || str[i] == '[') {
            stack[++top] = str[i]; // 左括号入栈
        } else if (str[i] == ')' || str[i] == '}' || str[i] == ']') {
            if (top == -1) { // 如果栈为空，说明右括号无匹配
                printf("括号不匹配\n");
                return 1;
            }
            char c = stack[top--]; // 取出栈顶元素
            if ((str[i] == ')' && c != '(') ||
                (str[i] == '}' && c != '{') ||
                (str[i] == ']' && c != '[')) {
                printf("括号不匹配\n");
                return 1;
            }
        }
    }

    if (top != -1) { // 遍历完后栈不空，说明有未匹配的左括号
        printf("括号不匹配\n");
        return 1;
    }
    printf("括号匹配\n");
    return 0;
}